{"version":3,"sources":["picker/Note.tsx","picker/Picker.tsx","App.tsx","transform.ts","reportWebVitals.ts","index.tsx"],"names":["CLASSMAP","x","G3","A3","B3","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","Note","onUp","onDown","value","noteClassName","className","clsx","data-name","onClick","newValue","Tone","transpose","toNote","indexOf","disabled","Picker","notes","onChange","pickersCells","map","idx","order","App","init","Array","fill","useState","pick","setpick","slice","synth","toDestination","bpm","values","result","currentTime","i","length","push","pitch","start","transform","forEach","note","triggerAttackRelease","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2e73862.chunk.js","sourcesContent":["import clsx from \"clsx\";\nimport * as Tone from \"tone\";\nimport \"./note.css\";\n\nconst CLASSMAP: { [name: string]: string } = {\n  \"-\": \"rest\",\n  x: \"repeat\",\n  G3: \"low-g\",\n  A3: \"low-a\",\n  B3: \"low-b\",\n  C4: \"low-c\",\n  D4: \"low-d\",\n  E4: \"low-e\",\n  F4: \"low-f\",\n  G4: \"hi-g\",\n  A4: \"hi-a\",\n  B4: \"hi-b\",\n  C5: \"hi-c\",\n  D5: \"hi-d\",\n  E5: \"hi-e\",\n};\n\ntype NoteProps = {\n  onUp: (newValue: string) => void;\n  onDown: (newValue: string) => void;\n  value: string;\n  order: number;\n};\n\nconst Note = ({ onUp, onDown, value }: NoteProps) => {\n  const goUp = () => {\n    if (value === \"x\") {\n      onUp(\"-\");\n    } else if (value === \"-\") {\n      onUp(\"G4\");\n    } else {\n      let newValue = Tone.Frequency(value);\n      do {\n        newValue = newValue.transpose(1);\n      } while (newValue.toNote().indexOf(\"#\") !== -1);\n      onUp(newValue.toNote());\n    }\n  };\n\n  const goDown = () => {\n    if (value === \"G3\") {\n      onDown(\"-\");\n    } else if (value === \"-\") {\n      onDown(\"x\");\n    } else {\n      let newValue = Tone.Frequency(value);\n      do {\n        newValue = newValue.transpose(-1);\n      } while (newValue.toNote().indexOf(\"#\") !== -1);\n      onUp(newValue.toNote());\n    }\n  };\n\n  const noteClassName: string = CLASSMAP[value];\n  return (\n    <div className={clsx(\"Note\", noteClassName)} data-name={value}>\n      <div className={clsx(\"up\")}>\n        <button onClick={goUp} disabled={value === \"E5\"}>\n          up\n        </button>\n      </div>\n\n      <div className={clsx(\"name\")} />\n\n      <div className={\"down\"}>\n        <button onClick={goDown} disabled={value === \"x\"}>\n          down\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Note;\n","import React from \"react\";\nimport Note from \"./Note\";\nimport \"./picker.css\";\n\ntype PickerProps = {\n  notes: string[];\n  onChange: (idx: number, newValue: string) => void;\n};\n\nexport default function Picker({ notes, onChange }: PickerProps) {\n  const pickersCells = notes.map((value, idx) => (\n    <Note\n      onDown={(newValue: string) => onChange(idx, newValue)}\n      onUp={(newValue: string) => onChange(idx, newValue)}\n      value={value}\n      key={idx}\n      order={idx}\n    />\n  ));\n\n  return (\n    <div className=\"Picker\">\n      <div className=\"Picker-inner\">{pickersCells}</div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport * as Tone from \"tone\";\nimport { transform } from \"./transform\";\nimport Picker from \"./picker/Picker\";\n\nimport \"minireset.css/minireset.sass\";\nimport \"./App.css\";\n\nfunction App() {\n  const init = Array(16).fill(\"E4\");\n\n  // ALL\n  // const init = [\n  //   \"-\",\n  //   \"x\",\n  //   \"G3\",\n  //   \"A3\",\n  //   \"B3\",\n  //   \"C4\",\n  //   \"D4\",\n  //   \"E4\",\n  //   \"F4\",\n  //   \"G4\",\n  //   \"A4\",\n  //   \"B4\",\n  //   \"C5\",\n  //   \"D5\",\n  //   \"E5\",\n  //   \"-\",\n  // ];\n\n  // const init = [\n  //   \"-\",\n  //   \"x\",\n  //   \"G3\",\n  //   \"A3\",\n  //   \"B3\",\n  //   \"C4\",\n  //   \"D4\",\n  //   \"E4\",\n  //   \"-\",\n  //   \"x\",\n  //   \"G3\",\n  //   \"A3\",\n  //   \"B3\",\n  //   \"C4\",\n  //   \"D4\",\n  //   \"E4\",\n  // ];\n  const [pick, setpick] = useState(init);\n\n  const update = (idx: number, newValue: string) => {\n    setpick([...pick.slice(0, idx), newValue, ...pick.slice(idx + 1)]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Animal Crossing Tunes Studio</h1>\n      <section className=\"picker\">\n        <Picker onChange={update} notes={pick} />\n      </section>\n      <div>\n        <button\n          onClick={() => {\n            const synth = new Tone.AMSynth().toDestination();\n            Tone.Transport.bpm.value = 100;\n\n            transform(pick).forEach((note) => {\n              synth.triggerAttackRelease(\n                note.pitch,\n                `0:0:${note.value}`,\n                `+0:0:${note.start}`\n              );\n            });\n          }}\n        >\n          play\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export type Note = {\n  pitch: string;\n  start: number; // in 16ths\n  value: number; // in 16ths\n};\n\nexport function transform(values: string[]): Note[] {\n  let result: Note[] = [];\n\n  let currentTime = 0; // sixteenths\n\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] === \"x\") {\n      currentTime += 2;\n    } else if (values[i] === \"-\") {\n      result[result.length - 1].value += 2;\n      currentTime += 2;\n    } else {\n      result.push({\n        pitch: values[i],\n        start: currentTime,\n        value: 2,\n      });\n      currentTime += 2;\n    }\n  }\n  return result;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}